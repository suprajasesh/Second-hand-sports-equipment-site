"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupServerlessSchematic = exports.setupFunctionsGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../../utils/versions");
function normalizeOptions(tree, setupOptions) {
    var _a, _b, _c;
    const project = (_a = setupOptions.project) !== null && _a !== void 0 ? _a : (0, devkit_1.readNxJson)(tree).defaultProject;
    return Object.assign(Object.assign({}, setupOptions), { project, serveTarget: (_b = setupOptions.serveTarget) !== null && _b !== void 0 ? _b : 'serve-functions', deployTarget: (_c = setupOptions.deployTarget) !== null && _c !== void 0 ? _c : 'deploy-functions' });
}
function createFiles(tree, options) {
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, `./files`), project.root, {
        tmpl: '',
    });
    const indexHtml = (0, devkit_1.joinPathFragments)(project.root, 'public/index.html');
    if (!tree.exists(indexHtml)) {
        tree.write(indexHtml, (0, devkit_1.stripIndents) `
        <h1>Netlify Functions</h1>
        <p>The sample function is available at <a href="/.netlify/functions/hello"><code>/.netlify/functions/hello</code></a>.</p>
      `);
    }
}
function addTargets(tree, options) {
    var _a, _b, _c;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        const isRootProject = projectConfig.root === '.';
        (_a = projectConfig.targets) !== null && _a !== void 0 ? _a : (projectConfig.targets = {});
        if (projectConfig) {
            if ((_b = projectConfig.targets) === null || _b === void 0 ? void 0 : _b.lint) {
                projectConfig.targets.lint.options.lintFilePatterns = [
                    ...(projectConfig.targets.lint.options.lintFilePatterns || []),
                    './functions/**/*.ts',
                ];
            }
            projectConfig.targets[`${options.serveTarget}`] = {
                command: 'npx netlify dev',
            };
            projectConfig.targets[`${options.deployTarget}`] = {
                dependsOn: ((_c = projectConfig.targets) === null || _c === void 0 ? void 0 : _c['lint']) ? ['lint'] : [],
                command: options.site
                    ? `npx netlify deploy --site ${options.site}`
                    : 'npx netlify deploy',
                options: isRootProject
                    ? undefined
                    : {
                        cwd: projectConfig.root,
                    },
                configurations: {
                    production: {
                        command: options.site
                            ? `npx netlify deploy --site ${options.site} --prod`
                            : 'npx netlify deploy --prod',
                        cwd: isRootProject ? undefined : projectConfig.root,
                    },
                },
            };
            (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfig);
        }
    });
}
function createOrUpdateNetlifyToml(tree, options) {
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const filePath = (0, devkit_1.joinPathFragments)(project.root, 'netlify.toml');
    const buildContent = tree.exists(filePath)
        ? tree.read(filePath).toString('utf-8')
        : (0, devkit_1.stripIndents) `
      [build]
      # Static files from this folder will be served at the root of the site.
      publish = "public"
    `;
    const fnsContent = (0, devkit_1.stripIndents) `
    [functions]
    # Directory with serverless functions, including background
    # functions, to deploy. This is relative to the base directory
    # if one has been set, or the root directory if
    # a base hasnâ€™t been set.
    directory = "functions/"

    # Specifies \`esbuild\` for functions bundling, esbuild is the default for TS
    # node_bundler = "esbuild"

    [functions."hello*"]
    # Apply settings to any functions with a name beginning with "hello"
  `;
    tree.write(filePath, `${buildContent}\n${fnsContent}`);
}
function setupFunctionsGenerator(tree, setupOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const options = normalizeOptions(tree, setupOptions);
        createFiles(tree, options);
        createOrUpdateNetlifyToml(tree, options);
        yield addTargets(tree, options);
        if (!options.skipPackageJson) {
            tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
                '@netlify/functions': versions_1.netlifyFunctionVersion,
                'netlify-cli': versions_1.netlifyCliVersion,
            }));
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.setupFunctionsGenerator = setupFunctionsGenerator;
exports.default = setupFunctionsGenerator;
exports.setupServerlessSchematic = (0, devkit_1.convertNxGenerator)(setupFunctionsGenerator);
//# sourceMappingURL=setup-functions.js.map